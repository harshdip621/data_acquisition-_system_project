
adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000da0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08000f30  08000f30  00001f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f78  08000f78  00002054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000f78  08000f78  00001f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000f80  08000f80  00002054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f80  08000f80  00001f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f84  08000f84  00001f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08000f88  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002054  2**0
                  CONTENTS
 10 .bss          00000168  20000054  20000054  00002054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00002054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002054  2**0
                  CONTENTS, READONLY
 13 .debug_info   000011aa  00000000  00000000  0000207e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000062a  00000000  00000000  00003228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000110  00000000  00000000  00003858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000b0  00000000  00000000  00003968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000192e8  00000000  00000000  00003a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000018c8  00000000  00000000  0001cd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bd7a  00000000  00000000  0001e5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aa342  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000079c  00000000  00000000  000aa388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000025  00000000  00000000  000aab24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000043  00000000  00000000  000aab49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08000f18 	.word	0x08000f18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08000f18 	.word	0x08000f18

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <AdcInit>:

#include "adc.h"

// (LDR) Sensor --> Channel 0 i.e. PA.0

void AdcInit(void) {
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	//1. Enable GPIO peripheral clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000274:	4b17      	ldr	r3, [pc, #92]	@ (80002d4 <AdcInit+0x64>)
 8000276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000278:	4a16      	ldr	r2, [pc, #88]	@ (80002d4 <AdcInit+0x64>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	6313      	str	r3, [r2, #48]	@ 0x30
	//2. Configure GPIO pin as analog mode (MODER = 0b11).
	GPIOA->MODER |= BV(0*2) | BV(0*2+1);
 8000280:	4b15      	ldr	r3, [pc, #84]	@ (80002d8 <AdcInit+0x68>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a14      	ldr	r2, [pc, #80]	@ (80002d8 <AdcInit+0x68>)
 8000286:	f043 0303 	orr.w	r3, r3, #3
 800028a:	6013      	str	r3, [r2, #0]
	//3. Enable ADC peripheral clock
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 800028c:	4b11      	ldr	r3, [pc, #68]	@ (80002d4 <AdcInit+0x64>)
 800028e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000290:	4a10      	ldr	r2, [pc, #64]	@ (80002d4 <AdcInit+0x64>)
 8000292:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000296:	6453      	str	r3, [r2, #68]	@ 0x44
	//4. Set ADC resolution as 12-bits (CR1 RES = 0b00).
	ADC1->CR1 &= ~(ADC_CR1_RES_0 | ADC_CR1_RES_1);
 8000298:	4b10      	ldr	r3, [pc, #64]	@ (80002dc <AdcInit+0x6c>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	4a0f      	ldr	r2, [pc, #60]	@ (80002dc <AdcInit+0x6c>)
 800029e:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80002a2:	6053      	str	r3, [r2, #4]
	//5. Enable single conversion (CR2 CONT = 0b0)
	ADC1->CR2 &= ~ADC_CR2_CONT;
 80002a4:	4b0d      	ldr	r3, [pc, #52]	@ (80002dc <AdcInit+0x6c>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	4a0c      	ldr	r2, [pc, #48]	@ (80002dc <AdcInit+0x6c>)
 80002aa:	f023 0302 	bic.w	r3, r3, #2
 80002ae:	6093      	str	r3, [r2, #8]
	//6. Set number of conversions in a sequence (SQR1 L(3:0) = 0b0000 for 1 conversion)
	ADC1->SQR1 |= (0 << ADC_SQR1_L_Pos);
 80002b0:	4b0a      	ldr	r3, [pc, #40]	@ (80002dc <AdcInit+0x6c>)
 80002b2:	4a0a      	ldr	r2, [pc, #40]	@ (80002dc <AdcInit+0x6c>)
 80002b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80002b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
	//7. Set channel number for conversions in sequence (e.g. SQR3 (4:0) = 0b00000 for channel 0).
	ADC1->SQR3 |= (0 << ADC_SQR3_SQ1_Pos);
 80002b8:	4b08      	ldr	r3, [pc, #32]	@ (80002dc <AdcInit+0x6c>)
 80002ba:	4a08      	ldr	r2, [pc, #32]	@ (80002dc <AdcInit+0x6c>)
 80002bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80002be:	6353      	str	r3, [r2, #52]	@ 0x34
	//8. Enable ADC (CR2 ADON=0b1)
	ADC1->CR2 |= ADC_CR2_ADON;
 80002c0:	4b06      	ldr	r3, [pc, #24]	@ (80002dc <AdcInit+0x6c>)
 80002c2:	689b      	ldr	r3, [r3, #8]
 80002c4:	4a05      	ldr	r2, [pc, #20]	@ (80002dc <AdcInit+0x6c>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6093      	str	r3, [r2, #8]

}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40020000 	.word	0x40020000
 80002dc:	40012000 	.word	0x40012000

080002e0 <AdcRead>:

uint16_t AdcRead(void) {
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
	//1. Start the conversion (CR2 SWSTART)
	ADC1->CR2 |= ADC_CR2_SWSTART;
 80002e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000314 <AdcRead+0x34>)
 80002e8:	689b      	ldr	r3, [r3, #8]
 80002ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000314 <AdcRead+0x34>)
 80002ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002f0:	6093      	str	r3, [r2, #8]
	//2. Wait for end of conversion (SR EOC bit)
	while(!(ADC1->SR & ADC_SR_EOC));
 80002f2:	bf00      	nop
 80002f4:	4b07      	ldr	r3, [pc, #28]	@ (8000314 <AdcRead+0x34>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f003 0302 	and.w	r3, r3, #2
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d0f9      	beq.n	80002f4 <AdcRead+0x14>
	//3. Read ADC data register (DR)
	uint16_t val = ADC1->DR;
 8000300:	4b04      	ldr	r3, [pc, #16]	@ (8000314 <AdcRead+0x34>)
 8000302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000304:	80fb      	strh	r3, [r7, #6]
	return val;
 8000306:	88fb      	ldrh	r3, [r7, #6]
}
 8000308:	4618      	mov	r0, r3
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40012000 	.word	0x40012000

08000318 <DelayMs>:

void SwDelayMs(uint32_t ms);

uint32_t DWT_Init(void);

static inline void DelayMs(volatile uint32_t ms) {
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000320:	4b0e      	ldr	r3, [pc, #56]	@ (800035c <DelayMs+0x44>)
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000326:	4b0e      	ldr	r3, [pc, #56]	@ (8000360 <DelayMs+0x48>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a0e      	ldr	r2, [pc, #56]	@ (8000364 <DelayMs+0x4c>)
 800032c:	fba2 2303 	umull	r2, r3, r2, r3
 8000330:	099b      	lsrs	r3, r3, #6
 8000332:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	68ba      	ldr	r2, [r7, #8]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800033e:	bf00      	nop
 8000340:	4b06      	ldr	r3, [pc, #24]	@ (800035c <DelayMs+0x44>)
 8000342:	685a      	ldr	r2, [r3, #4]
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	1ad2      	subs	r2, r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	429a      	cmp	r2, r3
 800034c:	d3f8      	bcc.n	8000340 <DelayMs+0x28>
}
 800034e:	bf00      	nop
 8000350:	bf00      	nop
 8000352:	3714      	adds	r7, #20
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	e0001000 	.word	0xe0001000
 8000360:	20000000 	.word	0x20000000
 8000364:	10624dd3 	.word	0x10624dd3

08000368 <main>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b086      	sub	sp, #24
 800036c:	af00      	add	r7, sp, #0
	UartInit(9600);
 800036e:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8000372:	f000 f889 	bl	8000488 <UartInit>
	UartPuts("ADC Demo\r\n");
 8000376:	480c      	ldr	r0, [pc, #48]	@ (80003a8 <main+0x40>)
 8000378:	f000 f8f0 	bl	800055c <UartPuts>
	AdcInit();
 800037c:	f7ff ff78 	bl	8000270 <AdcInit>
	while(1) {
		char str[20];
		uint16_t val = AdcRead();
 8000380:	f7ff ffae 	bl	80002e0 <AdcRead>
 8000384:	4603      	mov	r3, r0
 8000386:	82fb      	strh	r3, [r7, #22]
		sprintf(str, "ADC=%d\r\n", val);
 8000388:	8afa      	ldrh	r2, [r7, #22]
 800038a:	463b      	mov	r3, r7
 800038c:	4907      	ldr	r1, [pc, #28]	@ (80003ac <main+0x44>)
 800038e:	4618      	mov	r0, r3
 8000390:	f000 f92a 	bl	80005e8 <siprintf>
		UartPuts(str);
 8000394:	463b      	mov	r3, r7
 8000396:	4618      	mov	r0, r3
 8000398:	f000 f8e0 	bl	800055c <UartPuts>
		DelayMs(1000);
 800039c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003a0:	f7ff ffba 	bl	8000318 <DelayMs>
	while(1) {
 80003a4:	bf00      	nop
 80003a6:	e7eb      	b.n	8000380 <main+0x18>
 80003a8:	08000f30 	.word	0x08000f30
 80003ac:	08000f3c 	.word	0x08000f3c

080003b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003b8:	4a14      	ldr	r2, [pc, #80]	@ (800040c <_sbrk+0x5c>)
 80003ba:	4b15      	ldr	r3, [pc, #84]	@ (8000410 <_sbrk+0x60>)
 80003bc:	1ad3      	subs	r3, r2, r3
 80003be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003c4:	4b13      	ldr	r3, [pc, #76]	@ (8000414 <_sbrk+0x64>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d102      	bne.n	80003d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003cc:	4b11      	ldr	r3, [pc, #68]	@ (8000414 <_sbrk+0x64>)
 80003ce:	4a12      	ldr	r2, [pc, #72]	@ (8000418 <_sbrk+0x68>)
 80003d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003d2:	4b10      	ldr	r3, [pc, #64]	@ (8000414 <_sbrk+0x64>)
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4413      	add	r3, r2
 80003da:	693a      	ldr	r2, [r7, #16]
 80003dc:	429a      	cmp	r2, r3
 80003de:	d207      	bcs.n	80003f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003e0:	f000 f924 	bl	800062c <__errno>
 80003e4:	4603      	mov	r3, r0
 80003e6:	220c      	movs	r2, #12
 80003e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80003ee:	e009      	b.n	8000404 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003f0:	4b08      	ldr	r3, [pc, #32]	@ (8000414 <_sbrk+0x64>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003f6:	4b07      	ldr	r3, [pc, #28]	@ (8000414 <_sbrk+0x64>)
 80003f8:	681a      	ldr	r2, [r3, #0]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4413      	add	r3, r2
 80003fe:	4a05      	ldr	r2, [pc, #20]	@ (8000414 <_sbrk+0x64>)
 8000400:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000402:	68fb      	ldr	r3, [r7, #12]
}
 8000404:	4618      	mov	r0, r3
 8000406:	3718      	adds	r7, #24
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20020000 	.word	0x20020000
 8000410:	00000400 	.word	0x00000400
 8000414:	20000070 	.word	0x20000070
 8000418:	200001c0 	.word	0x200001c0

0800041c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  DWT_Init();
 8000420:	f000 f802 	bl	8000428 <DWT_Init>
}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}

08000428 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800042c:	4b14      	ldr	r3, [pc, #80]	@ (8000480 <DWT_Init+0x58>)
 800042e:	68db      	ldr	r3, [r3, #12]
 8000430:	4a13      	ldr	r2, [pc, #76]	@ (8000480 <DWT_Init+0x58>)
 8000432:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000436:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000438:	4b11      	ldr	r3, [pc, #68]	@ (8000480 <DWT_Init+0x58>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	4a10      	ldr	r2, [pc, #64]	@ (8000480 <DWT_Init+0x58>)
 800043e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000442:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000444:	4b0f      	ldr	r3, [pc, #60]	@ (8000484 <DWT_Init+0x5c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a0e      	ldr	r2, [pc, #56]	@ (8000484 <DWT_Init+0x5c>)
 800044a:	f023 0301 	bic.w	r3, r3, #1
 800044e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000450:	4b0c      	ldr	r3, [pc, #48]	@ (8000484 <DWT_Init+0x5c>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a0b      	ldr	r2, [pc, #44]	@ (8000484 <DWT_Init+0x5c>)
 8000456:	f043 0301 	orr.w	r3, r3, #1
 800045a:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800045c:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <DWT_Init+0x5c>)
 800045e:	2200      	movs	r2, #0
 8000460:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000462:	bf00      	nop
    __ASM volatile ("NOP");
 8000464:	bf00      	nop
    __ASM volatile ("NOP");
 8000466:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000468:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <DWT_Init+0x5c>)
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	2b00      	cmp	r3, #0
 800046e:	bf0c      	ite	eq
 8000470:	2301      	moveq	r3, #1
 8000472:	2300      	movne	r3, #0
 8000474:	b2db      	uxtb	r3, r3
}
 8000476:	4618      	mov	r0, r3
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	e000edf0 	.word	0xe000edf0
 8000484:	e0001000 	.word	0xe0001000

08000488 <UartInit>:
 *      Author: admin
 */

#include "uart.h"

void UartInit(uint32_t baud) {
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	/* GPIO config */
	// enable gpio clock
	//RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000490:	4b24      	ldr	r3, [pc, #144]	@ (8000524 <UartInit+0x9c>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000494:	4a23      	ldr	r2, [pc, #140]	@ (8000524 <UartInit+0x9c>)
 8000496:	f043 0301 	orr.w	r3, r3, #1
 800049a:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio - no pull up & no pull down
	GPIOA->PUPDR &= ~(BV(2*2+1) | BV(2*2) | BV(2*3+1) | BV(2*3));
 800049c:	4b22      	ldr	r3, [pc, #136]	@ (8000528 <UartInit+0xa0>)
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	4a21      	ldr	r2, [pc, #132]	@ (8000528 <UartInit+0xa0>)
 80004a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80004a6:	60d3      	str	r3, [r2, #12]
	// set gpio (PA2, PA3) mode as alt fn = 10
	GPIOA->MODER |= BV(2*2+1) | BV(2*3+1);
 80004a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000528 <UartInit+0xa0>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a1e      	ldr	r2, [pc, #120]	@ (8000528 <UartInit+0xa0>)
 80004ae:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80004b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(2*2) | BV(2*3));
 80004b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000528 <UartInit+0xa0>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000528 <UartInit+0xa0>)
 80004ba:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 80004be:	6013      	str	r3, [r2, #0]
	// set gpio (PA2, PA3) pin alt fn as uart (AF7) -- AFRL = AFR[0], AFRH = AFR[1]
	GPIOA->AFR[0] = (7 << (2*4)) | (7 << (3*4));
 80004c0:	4b19      	ldr	r3, [pc, #100]	@ (8000528 <UartInit+0xa0>)
 80004c2:	f44f 42ee 	mov.w	r2, #30464	@ 0x7700
 80004c6:	621a      	str	r2, [r3, #32]
	/* UART config */
	// enable UART2 clock
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80004c8:	4b16      	ldr	r3, [pc, #88]	@ (8000524 <UartInit+0x9c>)
 80004ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004cc:	4a15      	ldr	r2, [pc, #84]	@ (8000524 <UartInit+0x9c>)
 80004ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004d2:	6413      	str	r3, [r2, #64]	@ 0x40
	// UART2 config (8N1) = 8-bit data transfer=0, disable parity=0, tx en=1, rx en=1
	USART2->CR1 = USART_CR1_TE | USART_CR1_RE;
 80004d4:	4b15      	ldr	r3, [pc, #84]	@ (800052c <UartInit+0xa4>)
 80004d6:	220c      	movs	r2, #12
 80004d8:	60da      	str	r2, [r3, #12]
	// baud rate setting
	if(baud == 9600)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 80004e0:	d104      	bne.n	80004ec <UartInit+0x64>
		USART2->BRR = 0x0683;
 80004e2:	4b12      	ldr	r3, [pc, #72]	@ (800052c <UartInit+0xa4>)
 80004e4:	f240 6283 	movw	r2, #1667	@ 0x683
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	e00f      	b.n	800050c <UartInit+0x84>
	else if(baud == 38400)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 80004f2:	d104      	bne.n	80004fe <UartInit+0x76>
		USART2->BRR = 0x01A1;
 80004f4:	4b0d      	ldr	r3, [pc, #52]	@ (800052c <UartInit+0xa4>)
 80004f6:	f240 12a1 	movw	r2, #417	@ 0x1a1
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	e006      	b.n	800050c <UartInit+0x84>
	else if(baud == 115200)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000504:	d102      	bne.n	800050c <UartInit+0x84>
		USART2->BRR = 0x008B;
 8000506:	4b09      	ldr	r3, [pc, #36]	@ (800052c <UartInit+0xa4>)
 8000508:	228b      	movs	r2, #139	@ 0x8b
 800050a:	609a      	str	r2, [r3, #8]
	// enable uart=1
	USART2->CR1 |= USART_CR1_UE;
 800050c:	4b07      	ldr	r3, [pc, #28]	@ (800052c <UartInit+0xa4>)
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	4a06      	ldr	r2, [pc, #24]	@ (800052c <UartInit+0xa4>)
 8000512:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000516:	60d3      	str	r3, [r2, #12]
}
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	40023800 	.word	0x40023800
 8000528:	40020000 	.word	0x40020000
 800052c:	40004400 	.word	0x40004400

08000530 <UartPutch>:

void UartPutch(int ch) {
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	// write char in TDR
	USART2->DR = ch;
 8000538:	4a07      	ldr	r2, [pc, #28]	@ (8000558 <UartPutch+0x28>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6053      	str	r3, [r2, #4]
	// wait until Tx is done (until Tx regr is not empty)
	while((USART2->SR & USART_SR_TXE) == 0)
 800053e:	bf00      	nop
 8000540:	4b05      	ldr	r3, [pc, #20]	@ (8000558 <UartPutch+0x28>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000548:	2b00      	cmp	r3, #0
 800054a:	d0f9      	beq.n	8000540 <UartPutch+0x10>
		;
}
 800054c:	bf00      	nop
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	40004400 	.word	0x40004400

0800055c <UartPuts>:
		;
	// read char from RDR
	return USART2->DR;
}

void UartPuts(char *str) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i] != '\0'; i++)
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e009      	b.n	800057e <UartPuts+0x22>
		UartPutch(str[i]);
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	4413      	add	r3, r2
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ffdc 	bl	8000530 <UartPutch>
	for(int i=0; str[i] != '\0'; i++)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	3301      	adds	r3, #1
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	4413      	add	r3, r2
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d1ef      	bne.n	800056a <UartPuts+0xe>
}
 800058a:	bf00      	nop
 800058c:	bf00      	nop
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000594:	480d      	ldr	r0, [pc, #52]	@ (80005cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000596:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000598:	f7ff ff40 	bl	800041c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800059c:	480c      	ldr	r0, [pc, #48]	@ (80005d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800059e:	490d      	ldr	r1, [pc, #52]	@ (80005d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a0:	4a0d      	ldr	r2, [pc, #52]	@ (80005d8 <LoopForever+0xe>)
  movs r3, #0
 80005a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a4:	e002      	b.n	80005ac <LoopCopyDataInit>

080005a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005aa:	3304      	adds	r3, #4

080005ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b0:	d3f9      	bcc.n	80005a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005b2:	4a0a      	ldr	r2, [pc, #40]	@ (80005dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b4:	4c0a      	ldr	r4, [pc, #40]	@ (80005e0 <LoopForever+0x16>)
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b8:	e001      	b.n	80005be <LoopFillZerobss>

080005ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005bc:	3204      	adds	r2, #4

080005be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c0:	d3fb      	bcc.n	80005ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005c2:	f000 f839 	bl	8000638 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005c6:	f7ff fecf 	bl	8000368 <main>

080005ca <LoopForever>:

LoopForever:
  b LoopForever
 80005ca:	e7fe      	b.n	80005ca <LoopForever>
  ldr   r0, =_estack
 80005cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d4:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80005d8:	08000f88 	.word	0x08000f88
  ldr r2, =_sbss
 80005dc:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80005e0:	200001bc 	.word	0x200001bc

080005e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e4:	e7fe      	b.n	80005e4 <ADC_IRQHandler>
	...

080005e8 <siprintf>:
 80005e8:	b40e      	push	{r1, r2, r3}
 80005ea:	b510      	push	{r4, lr}
 80005ec:	b09d      	sub	sp, #116	@ 0x74
 80005ee:	ab1f      	add	r3, sp, #124	@ 0x7c
 80005f0:	9002      	str	r0, [sp, #8]
 80005f2:	9006      	str	r0, [sp, #24]
 80005f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80005f8:	480a      	ldr	r0, [pc, #40]	@ (8000624 <siprintf+0x3c>)
 80005fa:	9107      	str	r1, [sp, #28]
 80005fc:	9104      	str	r1, [sp, #16]
 80005fe:	490a      	ldr	r1, [pc, #40]	@ (8000628 <siprintf+0x40>)
 8000600:	f853 2b04 	ldr.w	r2, [r3], #4
 8000604:	9105      	str	r1, [sp, #20]
 8000606:	2400      	movs	r4, #0
 8000608:	a902      	add	r1, sp, #8
 800060a:	6800      	ldr	r0, [r0, #0]
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8000610:	f000 f98c 	bl	800092c <_svfiprintf_r>
 8000614:	9b02      	ldr	r3, [sp, #8]
 8000616:	701c      	strb	r4, [r3, #0]
 8000618:	b01d      	add	sp, #116	@ 0x74
 800061a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800061e:	b003      	add	sp, #12
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000004 	.word	0x20000004
 8000628:	ffff0208 	.word	0xffff0208

0800062c <__errno>:
 800062c:	4b01      	ldr	r3, [pc, #4]	@ (8000634 <__errno+0x8>)
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000004 	.word	0x20000004

08000638 <__libc_init_array>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	4d0d      	ldr	r5, [pc, #52]	@ (8000670 <__libc_init_array+0x38>)
 800063c:	4c0d      	ldr	r4, [pc, #52]	@ (8000674 <__libc_init_array+0x3c>)
 800063e:	1b64      	subs	r4, r4, r5
 8000640:	10a4      	asrs	r4, r4, #2
 8000642:	2600      	movs	r6, #0
 8000644:	42a6      	cmp	r6, r4
 8000646:	d109      	bne.n	800065c <__libc_init_array+0x24>
 8000648:	4d0b      	ldr	r5, [pc, #44]	@ (8000678 <__libc_init_array+0x40>)
 800064a:	4c0c      	ldr	r4, [pc, #48]	@ (800067c <__libc_init_array+0x44>)
 800064c:	f000 fc64 	bl	8000f18 <_init>
 8000650:	1b64      	subs	r4, r4, r5
 8000652:	10a4      	asrs	r4, r4, #2
 8000654:	2600      	movs	r6, #0
 8000656:	42a6      	cmp	r6, r4
 8000658:	d105      	bne.n	8000666 <__libc_init_array+0x2e>
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000660:	4798      	blx	r3
 8000662:	3601      	adds	r6, #1
 8000664:	e7ee      	b.n	8000644 <__libc_init_array+0xc>
 8000666:	f855 3b04 	ldr.w	r3, [r5], #4
 800066a:	4798      	blx	r3
 800066c:	3601      	adds	r6, #1
 800066e:	e7f2      	b.n	8000656 <__libc_init_array+0x1e>
 8000670:	08000f80 	.word	0x08000f80
 8000674:	08000f80 	.word	0x08000f80
 8000678:	08000f80 	.word	0x08000f80
 800067c:	08000f84 	.word	0x08000f84

08000680 <__retarget_lock_acquire_recursive>:
 8000680:	4770      	bx	lr

08000682 <__retarget_lock_release_recursive>:
 8000682:	4770      	bx	lr

08000684 <_free_r>:
 8000684:	b538      	push	{r3, r4, r5, lr}
 8000686:	4605      	mov	r5, r0
 8000688:	2900      	cmp	r1, #0
 800068a:	d041      	beq.n	8000710 <_free_r+0x8c>
 800068c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000690:	1f0c      	subs	r4, r1, #4
 8000692:	2b00      	cmp	r3, #0
 8000694:	bfb8      	it	lt
 8000696:	18e4      	addlt	r4, r4, r3
 8000698:	f000 f8e0 	bl	800085c <__malloc_lock>
 800069c:	4a1d      	ldr	r2, [pc, #116]	@ (8000714 <_free_r+0x90>)
 800069e:	6813      	ldr	r3, [r2, #0]
 80006a0:	b933      	cbnz	r3, 80006b0 <_free_r+0x2c>
 80006a2:	6063      	str	r3, [r4, #4]
 80006a4:	6014      	str	r4, [r2, #0]
 80006a6:	4628      	mov	r0, r5
 80006a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80006ac:	f000 b8dc 	b.w	8000868 <__malloc_unlock>
 80006b0:	42a3      	cmp	r3, r4
 80006b2:	d908      	bls.n	80006c6 <_free_r+0x42>
 80006b4:	6820      	ldr	r0, [r4, #0]
 80006b6:	1821      	adds	r1, r4, r0
 80006b8:	428b      	cmp	r3, r1
 80006ba:	bf01      	itttt	eq
 80006bc:	6819      	ldreq	r1, [r3, #0]
 80006be:	685b      	ldreq	r3, [r3, #4]
 80006c0:	1809      	addeq	r1, r1, r0
 80006c2:	6021      	streq	r1, [r4, #0]
 80006c4:	e7ed      	b.n	80006a2 <_free_r+0x1e>
 80006c6:	461a      	mov	r2, r3
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	b10b      	cbz	r3, 80006d0 <_free_r+0x4c>
 80006cc:	42a3      	cmp	r3, r4
 80006ce:	d9fa      	bls.n	80006c6 <_free_r+0x42>
 80006d0:	6811      	ldr	r1, [r2, #0]
 80006d2:	1850      	adds	r0, r2, r1
 80006d4:	42a0      	cmp	r0, r4
 80006d6:	d10b      	bne.n	80006f0 <_free_r+0x6c>
 80006d8:	6820      	ldr	r0, [r4, #0]
 80006da:	4401      	add	r1, r0
 80006dc:	1850      	adds	r0, r2, r1
 80006de:	4283      	cmp	r3, r0
 80006e0:	6011      	str	r1, [r2, #0]
 80006e2:	d1e0      	bne.n	80006a6 <_free_r+0x22>
 80006e4:	6818      	ldr	r0, [r3, #0]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	6053      	str	r3, [r2, #4]
 80006ea:	4408      	add	r0, r1
 80006ec:	6010      	str	r0, [r2, #0]
 80006ee:	e7da      	b.n	80006a6 <_free_r+0x22>
 80006f0:	d902      	bls.n	80006f8 <_free_r+0x74>
 80006f2:	230c      	movs	r3, #12
 80006f4:	602b      	str	r3, [r5, #0]
 80006f6:	e7d6      	b.n	80006a6 <_free_r+0x22>
 80006f8:	6820      	ldr	r0, [r4, #0]
 80006fa:	1821      	adds	r1, r4, r0
 80006fc:	428b      	cmp	r3, r1
 80006fe:	bf04      	itt	eq
 8000700:	6819      	ldreq	r1, [r3, #0]
 8000702:	685b      	ldreq	r3, [r3, #4]
 8000704:	6063      	str	r3, [r4, #4]
 8000706:	bf04      	itt	eq
 8000708:	1809      	addeq	r1, r1, r0
 800070a:	6021      	streq	r1, [r4, #0]
 800070c:	6054      	str	r4, [r2, #4]
 800070e:	e7ca      	b.n	80006a6 <_free_r+0x22>
 8000710:	bd38      	pop	{r3, r4, r5, pc}
 8000712:	bf00      	nop
 8000714:	200001b8 	.word	0x200001b8

08000718 <sbrk_aligned>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	4e0f      	ldr	r6, [pc, #60]	@ (8000758 <sbrk_aligned+0x40>)
 800071c:	460c      	mov	r4, r1
 800071e:	6831      	ldr	r1, [r6, #0]
 8000720:	4605      	mov	r5, r0
 8000722:	b911      	cbnz	r1, 800072a <sbrk_aligned+0x12>
 8000724:	f000 fba4 	bl	8000e70 <_sbrk_r>
 8000728:	6030      	str	r0, [r6, #0]
 800072a:	4621      	mov	r1, r4
 800072c:	4628      	mov	r0, r5
 800072e:	f000 fb9f 	bl	8000e70 <_sbrk_r>
 8000732:	1c43      	adds	r3, r0, #1
 8000734:	d103      	bne.n	800073e <sbrk_aligned+0x26>
 8000736:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800073a:	4620      	mov	r0, r4
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	1cc4      	adds	r4, r0, #3
 8000740:	f024 0403 	bic.w	r4, r4, #3
 8000744:	42a0      	cmp	r0, r4
 8000746:	d0f8      	beq.n	800073a <sbrk_aligned+0x22>
 8000748:	1a21      	subs	r1, r4, r0
 800074a:	4628      	mov	r0, r5
 800074c:	f000 fb90 	bl	8000e70 <_sbrk_r>
 8000750:	3001      	adds	r0, #1
 8000752:	d1f2      	bne.n	800073a <sbrk_aligned+0x22>
 8000754:	e7ef      	b.n	8000736 <sbrk_aligned+0x1e>
 8000756:	bf00      	nop
 8000758:	200001b4 	.word	0x200001b4

0800075c <_malloc_r>:
 800075c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000760:	1ccd      	adds	r5, r1, #3
 8000762:	f025 0503 	bic.w	r5, r5, #3
 8000766:	3508      	adds	r5, #8
 8000768:	2d0c      	cmp	r5, #12
 800076a:	bf38      	it	cc
 800076c:	250c      	movcc	r5, #12
 800076e:	2d00      	cmp	r5, #0
 8000770:	4606      	mov	r6, r0
 8000772:	db01      	blt.n	8000778 <_malloc_r+0x1c>
 8000774:	42a9      	cmp	r1, r5
 8000776:	d904      	bls.n	8000782 <_malloc_r+0x26>
 8000778:	230c      	movs	r3, #12
 800077a:	6033      	str	r3, [r6, #0]
 800077c:	2000      	movs	r0, #0
 800077e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000782:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000858 <_malloc_r+0xfc>
 8000786:	f000 f869 	bl	800085c <__malloc_lock>
 800078a:	f8d8 3000 	ldr.w	r3, [r8]
 800078e:	461c      	mov	r4, r3
 8000790:	bb44      	cbnz	r4, 80007e4 <_malloc_r+0x88>
 8000792:	4629      	mov	r1, r5
 8000794:	4630      	mov	r0, r6
 8000796:	f7ff ffbf 	bl	8000718 <sbrk_aligned>
 800079a:	1c43      	adds	r3, r0, #1
 800079c:	4604      	mov	r4, r0
 800079e:	d158      	bne.n	8000852 <_malloc_r+0xf6>
 80007a0:	f8d8 4000 	ldr.w	r4, [r8]
 80007a4:	4627      	mov	r7, r4
 80007a6:	2f00      	cmp	r7, #0
 80007a8:	d143      	bne.n	8000832 <_malloc_r+0xd6>
 80007aa:	2c00      	cmp	r4, #0
 80007ac:	d04b      	beq.n	8000846 <_malloc_r+0xea>
 80007ae:	6823      	ldr	r3, [r4, #0]
 80007b0:	4639      	mov	r1, r7
 80007b2:	4630      	mov	r0, r6
 80007b4:	eb04 0903 	add.w	r9, r4, r3
 80007b8:	f000 fb5a 	bl	8000e70 <_sbrk_r>
 80007bc:	4581      	cmp	r9, r0
 80007be:	d142      	bne.n	8000846 <_malloc_r+0xea>
 80007c0:	6821      	ldr	r1, [r4, #0]
 80007c2:	1a6d      	subs	r5, r5, r1
 80007c4:	4629      	mov	r1, r5
 80007c6:	4630      	mov	r0, r6
 80007c8:	f7ff ffa6 	bl	8000718 <sbrk_aligned>
 80007cc:	3001      	adds	r0, #1
 80007ce:	d03a      	beq.n	8000846 <_malloc_r+0xea>
 80007d0:	6823      	ldr	r3, [r4, #0]
 80007d2:	442b      	add	r3, r5
 80007d4:	6023      	str	r3, [r4, #0]
 80007d6:	f8d8 3000 	ldr.w	r3, [r8]
 80007da:	685a      	ldr	r2, [r3, #4]
 80007dc:	bb62      	cbnz	r2, 8000838 <_malloc_r+0xdc>
 80007de:	f8c8 7000 	str.w	r7, [r8]
 80007e2:	e00f      	b.n	8000804 <_malloc_r+0xa8>
 80007e4:	6822      	ldr	r2, [r4, #0]
 80007e6:	1b52      	subs	r2, r2, r5
 80007e8:	d420      	bmi.n	800082c <_malloc_r+0xd0>
 80007ea:	2a0b      	cmp	r2, #11
 80007ec:	d917      	bls.n	800081e <_malloc_r+0xc2>
 80007ee:	1961      	adds	r1, r4, r5
 80007f0:	42a3      	cmp	r3, r4
 80007f2:	6025      	str	r5, [r4, #0]
 80007f4:	bf18      	it	ne
 80007f6:	6059      	strne	r1, [r3, #4]
 80007f8:	6863      	ldr	r3, [r4, #4]
 80007fa:	bf08      	it	eq
 80007fc:	f8c8 1000 	streq.w	r1, [r8]
 8000800:	5162      	str	r2, [r4, r5]
 8000802:	604b      	str	r3, [r1, #4]
 8000804:	4630      	mov	r0, r6
 8000806:	f000 f82f 	bl	8000868 <__malloc_unlock>
 800080a:	f104 000b 	add.w	r0, r4, #11
 800080e:	1d23      	adds	r3, r4, #4
 8000810:	f020 0007 	bic.w	r0, r0, #7
 8000814:	1ac2      	subs	r2, r0, r3
 8000816:	bf1c      	itt	ne
 8000818:	1a1b      	subne	r3, r3, r0
 800081a:	50a3      	strne	r3, [r4, r2]
 800081c:	e7af      	b.n	800077e <_malloc_r+0x22>
 800081e:	6862      	ldr	r2, [r4, #4]
 8000820:	42a3      	cmp	r3, r4
 8000822:	bf0c      	ite	eq
 8000824:	f8c8 2000 	streq.w	r2, [r8]
 8000828:	605a      	strne	r2, [r3, #4]
 800082a:	e7eb      	b.n	8000804 <_malloc_r+0xa8>
 800082c:	4623      	mov	r3, r4
 800082e:	6864      	ldr	r4, [r4, #4]
 8000830:	e7ae      	b.n	8000790 <_malloc_r+0x34>
 8000832:	463c      	mov	r4, r7
 8000834:	687f      	ldr	r7, [r7, #4]
 8000836:	e7b6      	b.n	80007a6 <_malloc_r+0x4a>
 8000838:	461a      	mov	r2, r3
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	42a3      	cmp	r3, r4
 800083e:	d1fb      	bne.n	8000838 <_malloc_r+0xdc>
 8000840:	2300      	movs	r3, #0
 8000842:	6053      	str	r3, [r2, #4]
 8000844:	e7de      	b.n	8000804 <_malloc_r+0xa8>
 8000846:	230c      	movs	r3, #12
 8000848:	6033      	str	r3, [r6, #0]
 800084a:	4630      	mov	r0, r6
 800084c:	f000 f80c 	bl	8000868 <__malloc_unlock>
 8000850:	e794      	b.n	800077c <_malloc_r+0x20>
 8000852:	6005      	str	r5, [r0, #0]
 8000854:	e7d6      	b.n	8000804 <_malloc_r+0xa8>
 8000856:	bf00      	nop
 8000858:	200001b8 	.word	0x200001b8

0800085c <__malloc_lock>:
 800085c:	4801      	ldr	r0, [pc, #4]	@ (8000864 <__malloc_lock+0x8>)
 800085e:	f7ff bf0f 	b.w	8000680 <__retarget_lock_acquire_recursive>
 8000862:	bf00      	nop
 8000864:	200001b0 	.word	0x200001b0

08000868 <__malloc_unlock>:
 8000868:	4801      	ldr	r0, [pc, #4]	@ (8000870 <__malloc_unlock+0x8>)
 800086a:	f7ff bf0a 	b.w	8000682 <__retarget_lock_release_recursive>
 800086e:	bf00      	nop
 8000870:	200001b0 	.word	0x200001b0

08000874 <__ssputs_r>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	688e      	ldr	r6, [r1, #8]
 800087a:	461f      	mov	r7, r3
 800087c:	42be      	cmp	r6, r7
 800087e:	680b      	ldr	r3, [r1, #0]
 8000880:	4682      	mov	sl, r0
 8000882:	460c      	mov	r4, r1
 8000884:	4690      	mov	r8, r2
 8000886:	d82d      	bhi.n	80008e4 <__ssputs_r+0x70>
 8000888:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800088c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000890:	d026      	beq.n	80008e0 <__ssputs_r+0x6c>
 8000892:	6965      	ldr	r5, [r4, #20]
 8000894:	6909      	ldr	r1, [r1, #16]
 8000896:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800089a:	eba3 0901 	sub.w	r9, r3, r1
 800089e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80008a2:	1c7b      	adds	r3, r7, #1
 80008a4:	444b      	add	r3, r9
 80008a6:	106d      	asrs	r5, r5, #1
 80008a8:	429d      	cmp	r5, r3
 80008aa:	bf38      	it	cc
 80008ac:	461d      	movcc	r5, r3
 80008ae:	0553      	lsls	r3, r2, #21
 80008b0:	d527      	bpl.n	8000902 <__ssputs_r+0x8e>
 80008b2:	4629      	mov	r1, r5
 80008b4:	f7ff ff52 	bl	800075c <_malloc_r>
 80008b8:	4606      	mov	r6, r0
 80008ba:	b360      	cbz	r0, 8000916 <__ssputs_r+0xa2>
 80008bc:	6921      	ldr	r1, [r4, #16]
 80008be:	464a      	mov	r2, r9
 80008c0:	f000 fae6 	bl	8000e90 <memcpy>
 80008c4:	89a3      	ldrh	r3, [r4, #12]
 80008c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80008ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ce:	81a3      	strh	r3, [r4, #12]
 80008d0:	6126      	str	r6, [r4, #16]
 80008d2:	6165      	str	r5, [r4, #20]
 80008d4:	444e      	add	r6, r9
 80008d6:	eba5 0509 	sub.w	r5, r5, r9
 80008da:	6026      	str	r6, [r4, #0]
 80008dc:	60a5      	str	r5, [r4, #8]
 80008de:	463e      	mov	r6, r7
 80008e0:	42be      	cmp	r6, r7
 80008e2:	d900      	bls.n	80008e6 <__ssputs_r+0x72>
 80008e4:	463e      	mov	r6, r7
 80008e6:	6820      	ldr	r0, [r4, #0]
 80008e8:	4632      	mov	r2, r6
 80008ea:	4641      	mov	r1, r8
 80008ec:	f000 faa6 	bl	8000e3c <memmove>
 80008f0:	68a3      	ldr	r3, [r4, #8]
 80008f2:	1b9b      	subs	r3, r3, r6
 80008f4:	60a3      	str	r3, [r4, #8]
 80008f6:	6823      	ldr	r3, [r4, #0]
 80008f8:	4433      	add	r3, r6
 80008fa:	6023      	str	r3, [r4, #0]
 80008fc:	2000      	movs	r0, #0
 80008fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000902:	462a      	mov	r2, r5
 8000904:	f000 fad2 	bl	8000eac <_realloc_r>
 8000908:	4606      	mov	r6, r0
 800090a:	2800      	cmp	r0, #0
 800090c:	d1e0      	bne.n	80008d0 <__ssputs_r+0x5c>
 800090e:	6921      	ldr	r1, [r4, #16]
 8000910:	4650      	mov	r0, sl
 8000912:	f7ff feb7 	bl	8000684 <_free_r>
 8000916:	230c      	movs	r3, #12
 8000918:	f8ca 3000 	str.w	r3, [sl]
 800091c:	89a3      	ldrh	r3, [r4, #12]
 800091e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000922:	81a3      	strh	r3, [r4, #12]
 8000924:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000928:	e7e9      	b.n	80008fe <__ssputs_r+0x8a>
	...

0800092c <_svfiprintf_r>:
 800092c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000930:	4698      	mov	r8, r3
 8000932:	898b      	ldrh	r3, [r1, #12]
 8000934:	061b      	lsls	r3, r3, #24
 8000936:	b09d      	sub	sp, #116	@ 0x74
 8000938:	4607      	mov	r7, r0
 800093a:	460d      	mov	r5, r1
 800093c:	4614      	mov	r4, r2
 800093e:	d510      	bpl.n	8000962 <_svfiprintf_r+0x36>
 8000940:	690b      	ldr	r3, [r1, #16]
 8000942:	b973      	cbnz	r3, 8000962 <_svfiprintf_r+0x36>
 8000944:	2140      	movs	r1, #64	@ 0x40
 8000946:	f7ff ff09 	bl	800075c <_malloc_r>
 800094a:	6028      	str	r0, [r5, #0]
 800094c:	6128      	str	r0, [r5, #16]
 800094e:	b930      	cbnz	r0, 800095e <_svfiprintf_r+0x32>
 8000950:	230c      	movs	r3, #12
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000958:	b01d      	add	sp, #116	@ 0x74
 800095a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800095e:	2340      	movs	r3, #64	@ 0x40
 8000960:	616b      	str	r3, [r5, #20]
 8000962:	2300      	movs	r3, #0
 8000964:	9309      	str	r3, [sp, #36]	@ 0x24
 8000966:	2320      	movs	r3, #32
 8000968:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800096c:	f8cd 800c 	str.w	r8, [sp, #12]
 8000970:	2330      	movs	r3, #48	@ 0x30
 8000972:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000b10 <_svfiprintf_r+0x1e4>
 8000976:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800097a:	f04f 0901 	mov.w	r9, #1
 800097e:	4623      	mov	r3, r4
 8000980:	469a      	mov	sl, r3
 8000982:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000986:	b10a      	cbz	r2, 800098c <_svfiprintf_r+0x60>
 8000988:	2a25      	cmp	r2, #37	@ 0x25
 800098a:	d1f9      	bne.n	8000980 <_svfiprintf_r+0x54>
 800098c:	ebba 0b04 	subs.w	fp, sl, r4
 8000990:	d00b      	beq.n	80009aa <_svfiprintf_r+0x7e>
 8000992:	465b      	mov	r3, fp
 8000994:	4622      	mov	r2, r4
 8000996:	4629      	mov	r1, r5
 8000998:	4638      	mov	r0, r7
 800099a:	f7ff ff6b 	bl	8000874 <__ssputs_r>
 800099e:	3001      	adds	r0, #1
 80009a0:	f000 80a7 	beq.w	8000af2 <_svfiprintf_r+0x1c6>
 80009a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80009a6:	445a      	add	r2, fp
 80009a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80009aa:	f89a 3000 	ldrb.w	r3, [sl]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	f000 809f 	beq.w	8000af2 <_svfiprintf_r+0x1c6>
 80009b4:	2300      	movs	r3, #0
 80009b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80009be:	f10a 0a01 	add.w	sl, sl, #1
 80009c2:	9304      	str	r3, [sp, #16]
 80009c4:	9307      	str	r3, [sp, #28]
 80009c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80009ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80009cc:	4654      	mov	r4, sl
 80009ce:	2205      	movs	r2, #5
 80009d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009d4:	484e      	ldr	r0, [pc, #312]	@ (8000b10 <_svfiprintf_r+0x1e4>)
 80009d6:	f7ff fbfb 	bl	80001d0 <memchr>
 80009da:	9a04      	ldr	r2, [sp, #16]
 80009dc:	b9d8      	cbnz	r0, 8000a16 <_svfiprintf_r+0xea>
 80009de:	06d0      	lsls	r0, r2, #27
 80009e0:	bf44      	itt	mi
 80009e2:	2320      	movmi	r3, #32
 80009e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80009e8:	0711      	lsls	r1, r2, #28
 80009ea:	bf44      	itt	mi
 80009ec:	232b      	movmi	r3, #43	@ 0x2b
 80009ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80009f2:	f89a 3000 	ldrb.w	r3, [sl]
 80009f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80009f8:	d015      	beq.n	8000a26 <_svfiprintf_r+0xfa>
 80009fa:	9a07      	ldr	r2, [sp, #28]
 80009fc:	4654      	mov	r4, sl
 80009fe:	2000      	movs	r0, #0
 8000a00:	f04f 0c0a 	mov.w	ip, #10
 8000a04:	4621      	mov	r1, r4
 8000a06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000a0a:	3b30      	subs	r3, #48	@ 0x30
 8000a0c:	2b09      	cmp	r3, #9
 8000a0e:	d94b      	bls.n	8000aa8 <_svfiprintf_r+0x17c>
 8000a10:	b1b0      	cbz	r0, 8000a40 <_svfiprintf_r+0x114>
 8000a12:	9207      	str	r2, [sp, #28]
 8000a14:	e014      	b.n	8000a40 <_svfiprintf_r+0x114>
 8000a16:	eba0 0308 	sub.w	r3, r0, r8
 8000a1a:	fa09 f303 	lsl.w	r3, r9, r3
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	9304      	str	r3, [sp, #16]
 8000a22:	46a2      	mov	sl, r4
 8000a24:	e7d2      	b.n	80009cc <_svfiprintf_r+0xa0>
 8000a26:	9b03      	ldr	r3, [sp, #12]
 8000a28:	1d19      	adds	r1, r3, #4
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	9103      	str	r1, [sp, #12]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	bfbb      	ittet	lt
 8000a32:	425b      	neglt	r3, r3
 8000a34:	f042 0202 	orrlt.w	r2, r2, #2
 8000a38:	9307      	strge	r3, [sp, #28]
 8000a3a:	9307      	strlt	r3, [sp, #28]
 8000a3c:	bfb8      	it	lt
 8000a3e:	9204      	strlt	r2, [sp, #16]
 8000a40:	7823      	ldrb	r3, [r4, #0]
 8000a42:	2b2e      	cmp	r3, #46	@ 0x2e
 8000a44:	d10a      	bne.n	8000a5c <_svfiprintf_r+0x130>
 8000a46:	7863      	ldrb	r3, [r4, #1]
 8000a48:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a4a:	d132      	bne.n	8000ab2 <_svfiprintf_r+0x186>
 8000a4c:	9b03      	ldr	r3, [sp, #12]
 8000a4e:	1d1a      	adds	r2, r3, #4
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	9203      	str	r2, [sp, #12]
 8000a54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000a58:	3402      	adds	r4, #2
 8000a5a:	9305      	str	r3, [sp, #20]
 8000a5c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000b14 <_svfiprintf_r+0x1e8>
 8000a60:	7821      	ldrb	r1, [r4, #0]
 8000a62:	2203      	movs	r2, #3
 8000a64:	4650      	mov	r0, sl
 8000a66:	f7ff fbb3 	bl	80001d0 <memchr>
 8000a6a:	b138      	cbz	r0, 8000a7c <_svfiprintf_r+0x150>
 8000a6c:	9b04      	ldr	r3, [sp, #16]
 8000a6e:	eba0 000a 	sub.w	r0, r0, sl
 8000a72:	2240      	movs	r2, #64	@ 0x40
 8000a74:	4082      	lsls	r2, r0
 8000a76:	4313      	orrs	r3, r2
 8000a78:	3401      	adds	r4, #1
 8000a7a:	9304      	str	r3, [sp, #16]
 8000a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a80:	4825      	ldr	r0, [pc, #148]	@ (8000b18 <_svfiprintf_r+0x1ec>)
 8000a82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000a86:	2206      	movs	r2, #6
 8000a88:	f7ff fba2 	bl	80001d0 <memchr>
 8000a8c:	2800      	cmp	r0, #0
 8000a8e:	d036      	beq.n	8000afe <_svfiprintf_r+0x1d2>
 8000a90:	4b22      	ldr	r3, [pc, #136]	@ (8000b1c <_svfiprintf_r+0x1f0>)
 8000a92:	bb1b      	cbnz	r3, 8000adc <_svfiprintf_r+0x1b0>
 8000a94:	9b03      	ldr	r3, [sp, #12]
 8000a96:	3307      	adds	r3, #7
 8000a98:	f023 0307 	bic.w	r3, r3, #7
 8000a9c:	3308      	adds	r3, #8
 8000a9e:	9303      	str	r3, [sp, #12]
 8000aa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000aa2:	4433      	add	r3, r6
 8000aa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8000aa6:	e76a      	b.n	800097e <_svfiprintf_r+0x52>
 8000aa8:	fb0c 3202 	mla	r2, ip, r2, r3
 8000aac:	460c      	mov	r4, r1
 8000aae:	2001      	movs	r0, #1
 8000ab0:	e7a8      	b.n	8000a04 <_svfiprintf_r+0xd8>
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	3401      	adds	r4, #1
 8000ab6:	9305      	str	r3, [sp, #20]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f04f 0c0a 	mov.w	ip, #10
 8000abe:	4620      	mov	r0, r4
 8000ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ac4:	3a30      	subs	r2, #48	@ 0x30
 8000ac6:	2a09      	cmp	r2, #9
 8000ac8:	d903      	bls.n	8000ad2 <_svfiprintf_r+0x1a6>
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d0c6      	beq.n	8000a5c <_svfiprintf_r+0x130>
 8000ace:	9105      	str	r1, [sp, #20]
 8000ad0:	e7c4      	b.n	8000a5c <_svfiprintf_r+0x130>
 8000ad2:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ad6:	4604      	mov	r4, r0
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e7f0      	b.n	8000abe <_svfiprintf_r+0x192>
 8000adc:	ab03      	add	r3, sp, #12
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	462a      	mov	r2, r5
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <_svfiprintf_r+0x1f4>)
 8000ae4:	a904      	add	r1, sp, #16
 8000ae6:	4638      	mov	r0, r7
 8000ae8:	f3af 8000 	nop.w
 8000aec:	1c42      	adds	r2, r0, #1
 8000aee:	4606      	mov	r6, r0
 8000af0:	d1d6      	bne.n	8000aa0 <_svfiprintf_r+0x174>
 8000af2:	89ab      	ldrh	r3, [r5, #12]
 8000af4:	065b      	lsls	r3, r3, #25
 8000af6:	f53f af2d 	bmi.w	8000954 <_svfiprintf_r+0x28>
 8000afa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000afc:	e72c      	b.n	8000958 <_svfiprintf_r+0x2c>
 8000afe:	ab03      	add	r3, sp, #12
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	462a      	mov	r2, r5
 8000b04:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <_svfiprintf_r+0x1f4>)
 8000b06:	a904      	add	r1, sp, #16
 8000b08:	4638      	mov	r0, r7
 8000b0a:	f000 f879 	bl	8000c00 <_printf_i>
 8000b0e:	e7ed      	b.n	8000aec <_svfiprintf_r+0x1c0>
 8000b10:	08000f45 	.word	0x08000f45
 8000b14:	08000f4b 	.word	0x08000f4b
 8000b18:	08000f4f 	.word	0x08000f4f
 8000b1c:	00000000 	.word	0x00000000
 8000b20:	08000875 	.word	0x08000875

08000b24 <_printf_common>:
 8000b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b28:	4616      	mov	r6, r2
 8000b2a:	4698      	mov	r8, r3
 8000b2c:	688a      	ldr	r2, [r1, #8]
 8000b2e:	690b      	ldr	r3, [r1, #16]
 8000b30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000b34:	4293      	cmp	r3, r2
 8000b36:	bfb8      	it	lt
 8000b38:	4613      	movlt	r3, r2
 8000b3a:	6033      	str	r3, [r6, #0]
 8000b3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000b40:	4607      	mov	r7, r0
 8000b42:	460c      	mov	r4, r1
 8000b44:	b10a      	cbz	r2, 8000b4a <_printf_common+0x26>
 8000b46:	3301      	adds	r3, #1
 8000b48:	6033      	str	r3, [r6, #0]
 8000b4a:	6823      	ldr	r3, [r4, #0]
 8000b4c:	0699      	lsls	r1, r3, #26
 8000b4e:	bf42      	ittt	mi
 8000b50:	6833      	ldrmi	r3, [r6, #0]
 8000b52:	3302      	addmi	r3, #2
 8000b54:	6033      	strmi	r3, [r6, #0]
 8000b56:	6825      	ldr	r5, [r4, #0]
 8000b58:	f015 0506 	ands.w	r5, r5, #6
 8000b5c:	d106      	bne.n	8000b6c <_printf_common+0x48>
 8000b5e:	f104 0a19 	add.w	sl, r4, #25
 8000b62:	68e3      	ldr	r3, [r4, #12]
 8000b64:	6832      	ldr	r2, [r6, #0]
 8000b66:	1a9b      	subs	r3, r3, r2
 8000b68:	42ab      	cmp	r3, r5
 8000b6a:	dc26      	bgt.n	8000bba <_printf_common+0x96>
 8000b6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000b70:	6822      	ldr	r2, [r4, #0]
 8000b72:	3b00      	subs	r3, #0
 8000b74:	bf18      	it	ne
 8000b76:	2301      	movne	r3, #1
 8000b78:	0692      	lsls	r2, r2, #26
 8000b7a:	d42b      	bmi.n	8000bd4 <_printf_common+0xb0>
 8000b7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000b80:	4641      	mov	r1, r8
 8000b82:	4638      	mov	r0, r7
 8000b84:	47c8      	blx	r9
 8000b86:	3001      	adds	r0, #1
 8000b88:	d01e      	beq.n	8000bc8 <_printf_common+0xa4>
 8000b8a:	6823      	ldr	r3, [r4, #0]
 8000b8c:	6922      	ldr	r2, [r4, #16]
 8000b8e:	f003 0306 	and.w	r3, r3, #6
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	bf02      	ittt	eq
 8000b96:	68e5      	ldreq	r5, [r4, #12]
 8000b98:	6833      	ldreq	r3, [r6, #0]
 8000b9a:	1aed      	subeq	r5, r5, r3
 8000b9c:	68a3      	ldr	r3, [r4, #8]
 8000b9e:	bf0c      	ite	eq
 8000ba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ba4:	2500      	movne	r5, #0
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	bfc4      	itt	gt
 8000baa:	1a9b      	subgt	r3, r3, r2
 8000bac:	18ed      	addgt	r5, r5, r3
 8000bae:	2600      	movs	r6, #0
 8000bb0:	341a      	adds	r4, #26
 8000bb2:	42b5      	cmp	r5, r6
 8000bb4:	d11a      	bne.n	8000bec <_printf_common+0xc8>
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	e008      	b.n	8000bcc <_printf_common+0xa8>
 8000bba:	2301      	movs	r3, #1
 8000bbc:	4652      	mov	r2, sl
 8000bbe:	4641      	mov	r1, r8
 8000bc0:	4638      	mov	r0, r7
 8000bc2:	47c8      	blx	r9
 8000bc4:	3001      	adds	r0, #1
 8000bc6:	d103      	bne.n	8000bd0 <_printf_common+0xac>
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd0:	3501      	adds	r5, #1
 8000bd2:	e7c6      	b.n	8000b62 <_printf_common+0x3e>
 8000bd4:	18e1      	adds	r1, r4, r3
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	2030      	movs	r0, #48	@ 0x30
 8000bda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000bde:	4422      	add	r2, r4
 8000be0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000be4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000be8:	3302      	adds	r3, #2
 8000bea:	e7c7      	b.n	8000b7c <_printf_common+0x58>
 8000bec:	2301      	movs	r3, #1
 8000bee:	4622      	mov	r2, r4
 8000bf0:	4641      	mov	r1, r8
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	47c8      	blx	r9
 8000bf6:	3001      	adds	r0, #1
 8000bf8:	d0e6      	beq.n	8000bc8 <_printf_common+0xa4>
 8000bfa:	3601      	adds	r6, #1
 8000bfc:	e7d9      	b.n	8000bb2 <_printf_common+0x8e>
	...

08000c00 <_printf_i>:
 8000c00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	7e0f      	ldrb	r7, [r1, #24]
 8000c06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000c08:	2f78      	cmp	r7, #120	@ 0x78
 8000c0a:	4691      	mov	r9, r2
 8000c0c:	4680      	mov	r8, r0
 8000c0e:	460c      	mov	r4, r1
 8000c10:	469a      	mov	sl, r3
 8000c12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000c16:	d807      	bhi.n	8000c28 <_printf_i+0x28>
 8000c18:	2f62      	cmp	r7, #98	@ 0x62
 8000c1a:	d80a      	bhi.n	8000c32 <_printf_i+0x32>
 8000c1c:	2f00      	cmp	r7, #0
 8000c1e:	f000 80d1 	beq.w	8000dc4 <_printf_i+0x1c4>
 8000c22:	2f58      	cmp	r7, #88	@ 0x58
 8000c24:	f000 80b8 	beq.w	8000d98 <_printf_i+0x198>
 8000c28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000c2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000c30:	e03a      	b.n	8000ca8 <_printf_i+0xa8>
 8000c32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000c36:	2b15      	cmp	r3, #21
 8000c38:	d8f6      	bhi.n	8000c28 <_printf_i+0x28>
 8000c3a:	a101      	add	r1, pc, #4	@ (adr r1, 8000c40 <_printf_i+0x40>)
 8000c3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000c40:	08000c99 	.word	0x08000c99
 8000c44:	08000cad 	.word	0x08000cad
 8000c48:	08000c29 	.word	0x08000c29
 8000c4c:	08000c29 	.word	0x08000c29
 8000c50:	08000c29 	.word	0x08000c29
 8000c54:	08000c29 	.word	0x08000c29
 8000c58:	08000cad 	.word	0x08000cad
 8000c5c:	08000c29 	.word	0x08000c29
 8000c60:	08000c29 	.word	0x08000c29
 8000c64:	08000c29 	.word	0x08000c29
 8000c68:	08000c29 	.word	0x08000c29
 8000c6c:	08000dab 	.word	0x08000dab
 8000c70:	08000cd7 	.word	0x08000cd7
 8000c74:	08000d65 	.word	0x08000d65
 8000c78:	08000c29 	.word	0x08000c29
 8000c7c:	08000c29 	.word	0x08000c29
 8000c80:	08000dcd 	.word	0x08000dcd
 8000c84:	08000c29 	.word	0x08000c29
 8000c88:	08000cd7 	.word	0x08000cd7
 8000c8c:	08000c29 	.word	0x08000c29
 8000c90:	08000c29 	.word	0x08000c29
 8000c94:	08000d6d 	.word	0x08000d6d
 8000c98:	6833      	ldr	r3, [r6, #0]
 8000c9a:	1d1a      	adds	r2, r3, #4
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	6032      	str	r2, [r6, #0]
 8000ca0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000ca4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e09c      	b.n	8000de6 <_printf_i+0x1e6>
 8000cac:	6833      	ldr	r3, [r6, #0]
 8000cae:	6820      	ldr	r0, [r4, #0]
 8000cb0:	1d19      	adds	r1, r3, #4
 8000cb2:	6031      	str	r1, [r6, #0]
 8000cb4:	0606      	lsls	r6, r0, #24
 8000cb6:	d501      	bpl.n	8000cbc <_printf_i+0xbc>
 8000cb8:	681d      	ldr	r5, [r3, #0]
 8000cba:	e003      	b.n	8000cc4 <_printf_i+0xc4>
 8000cbc:	0645      	lsls	r5, r0, #25
 8000cbe:	d5fb      	bpl.n	8000cb8 <_printf_i+0xb8>
 8000cc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000cc4:	2d00      	cmp	r5, #0
 8000cc6:	da03      	bge.n	8000cd0 <_printf_i+0xd0>
 8000cc8:	232d      	movs	r3, #45	@ 0x2d
 8000cca:	426d      	negs	r5, r5
 8000ccc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000cd0:	4858      	ldr	r0, [pc, #352]	@ (8000e34 <_printf_i+0x234>)
 8000cd2:	230a      	movs	r3, #10
 8000cd4:	e011      	b.n	8000cfa <_printf_i+0xfa>
 8000cd6:	6821      	ldr	r1, [r4, #0]
 8000cd8:	6833      	ldr	r3, [r6, #0]
 8000cda:	0608      	lsls	r0, r1, #24
 8000cdc:	f853 5b04 	ldr.w	r5, [r3], #4
 8000ce0:	d402      	bmi.n	8000ce8 <_printf_i+0xe8>
 8000ce2:	0649      	lsls	r1, r1, #25
 8000ce4:	bf48      	it	mi
 8000ce6:	b2ad      	uxthmi	r5, r5
 8000ce8:	2f6f      	cmp	r7, #111	@ 0x6f
 8000cea:	4852      	ldr	r0, [pc, #328]	@ (8000e34 <_printf_i+0x234>)
 8000cec:	6033      	str	r3, [r6, #0]
 8000cee:	bf14      	ite	ne
 8000cf0:	230a      	movne	r3, #10
 8000cf2:	2308      	moveq	r3, #8
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000cfa:	6866      	ldr	r6, [r4, #4]
 8000cfc:	60a6      	str	r6, [r4, #8]
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	db05      	blt.n	8000d0e <_printf_i+0x10e>
 8000d02:	6821      	ldr	r1, [r4, #0]
 8000d04:	432e      	orrs	r6, r5
 8000d06:	f021 0104 	bic.w	r1, r1, #4
 8000d0a:	6021      	str	r1, [r4, #0]
 8000d0c:	d04b      	beq.n	8000da6 <_printf_i+0x1a6>
 8000d0e:	4616      	mov	r6, r2
 8000d10:	fbb5 f1f3 	udiv	r1, r5, r3
 8000d14:	fb03 5711 	mls	r7, r3, r1, r5
 8000d18:	5dc7      	ldrb	r7, [r0, r7]
 8000d1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000d1e:	462f      	mov	r7, r5
 8000d20:	42bb      	cmp	r3, r7
 8000d22:	460d      	mov	r5, r1
 8000d24:	d9f4      	bls.n	8000d10 <_printf_i+0x110>
 8000d26:	2b08      	cmp	r3, #8
 8000d28:	d10b      	bne.n	8000d42 <_printf_i+0x142>
 8000d2a:	6823      	ldr	r3, [r4, #0]
 8000d2c:	07df      	lsls	r7, r3, #31
 8000d2e:	d508      	bpl.n	8000d42 <_printf_i+0x142>
 8000d30:	6923      	ldr	r3, [r4, #16]
 8000d32:	6861      	ldr	r1, [r4, #4]
 8000d34:	4299      	cmp	r1, r3
 8000d36:	bfde      	ittt	le
 8000d38:	2330      	movle	r3, #48	@ 0x30
 8000d3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000d3e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000d42:	1b92      	subs	r2, r2, r6
 8000d44:	6122      	str	r2, [r4, #16]
 8000d46:	f8cd a000 	str.w	sl, [sp]
 8000d4a:	464b      	mov	r3, r9
 8000d4c:	aa03      	add	r2, sp, #12
 8000d4e:	4621      	mov	r1, r4
 8000d50:	4640      	mov	r0, r8
 8000d52:	f7ff fee7 	bl	8000b24 <_printf_common>
 8000d56:	3001      	adds	r0, #1
 8000d58:	d14a      	bne.n	8000df0 <_printf_i+0x1f0>
 8000d5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d5e:	b004      	add	sp, #16
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	6823      	ldr	r3, [r4, #0]
 8000d66:	f043 0320 	orr.w	r3, r3, #32
 8000d6a:	6023      	str	r3, [r4, #0]
 8000d6c:	4832      	ldr	r0, [pc, #200]	@ (8000e38 <_printf_i+0x238>)
 8000d6e:	2778      	movs	r7, #120	@ 0x78
 8000d70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000d74:	6823      	ldr	r3, [r4, #0]
 8000d76:	6831      	ldr	r1, [r6, #0]
 8000d78:	061f      	lsls	r7, r3, #24
 8000d7a:	f851 5b04 	ldr.w	r5, [r1], #4
 8000d7e:	d402      	bmi.n	8000d86 <_printf_i+0x186>
 8000d80:	065f      	lsls	r7, r3, #25
 8000d82:	bf48      	it	mi
 8000d84:	b2ad      	uxthmi	r5, r5
 8000d86:	6031      	str	r1, [r6, #0]
 8000d88:	07d9      	lsls	r1, r3, #31
 8000d8a:	bf44      	itt	mi
 8000d8c:	f043 0320 	orrmi.w	r3, r3, #32
 8000d90:	6023      	strmi	r3, [r4, #0]
 8000d92:	b11d      	cbz	r5, 8000d9c <_printf_i+0x19c>
 8000d94:	2310      	movs	r3, #16
 8000d96:	e7ad      	b.n	8000cf4 <_printf_i+0xf4>
 8000d98:	4826      	ldr	r0, [pc, #152]	@ (8000e34 <_printf_i+0x234>)
 8000d9a:	e7e9      	b.n	8000d70 <_printf_i+0x170>
 8000d9c:	6823      	ldr	r3, [r4, #0]
 8000d9e:	f023 0320 	bic.w	r3, r3, #32
 8000da2:	6023      	str	r3, [r4, #0]
 8000da4:	e7f6      	b.n	8000d94 <_printf_i+0x194>
 8000da6:	4616      	mov	r6, r2
 8000da8:	e7bd      	b.n	8000d26 <_printf_i+0x126>
 8000daa:	6833      	ldr	r3, [r6, #0]
 8000dac:	6825      	ldr	r5, [r4, #0]
 8000dae:	6961      	ldr	r1, [r4, #20]
 8000db0:	1d18      	adds	r0, r3, #4
 8000db2:	6030      	str	r0, [r6, #0]
 8000db4:	062e      	lsls	r6, r5, #24
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	d501      	bpl.n	8000dbe <_printf_i+0x1be>
 8000dba:	6019      	str	r1, [r3, #0]
 8000dbc:	e002      	b.n	8000dc4 <_printf_i+0x1c4>
 8000dbe:	0668      	lsls	r0, r5, #25
 8000dc0:	d5fb      	bpl.n	8000dba <_printf_i+0x1ba>
 8000dc2:	8019      	strh	r1, [r3, #0]
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	6123      	str	r3, [r4, #16]
 8000dc8:	4616      	mov	r6, r2
 8000dca:	e7bc      	b.n	8000d46 <_printf_i+0x146>
 8000dcc:	6833      	ldr	r3, [r6, #0]
 8000dce:	1d1a      	adds	r2, r3, #4
 8000dd0:	6032      	str	r2, [r6, #0]
 8000dd2:	681e      	ldr	r6, [r3, #0]
 8000dd4:	6862      	ldr	r2, [r4, #4]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4630      	mov	r0, r6
 8000dda:	f7ff f9f9 	bl	80001d0 <memchr>
 8000dde:	b108      	cbz	r0, 8000de4 <_printf_i+0x1e4>
 8000de0:	1b80      	subs	r0, r0, r6
 8000de2:	6060      	str	r0, [r4, #4]
 8000de4:	6863      	ldr	r3, [r4, #4]
 8000de6:	6123      	str	r3, [r4, #16]
 8000de8:	2300      	movs	r3, #0
 8000dea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000dee:	e7aa      	b.n	8000d46 <_printf_i+0x146>
 8000df0:	6923      	ldr	r3, [r4, #16]
 8000df2:	4632      	mov	r2, r6
 8000df4:	4649      	mov	r1, r9
 8000df6:	4640      	mov	r0, r8
 8000df8:	47d0      	blx	sl
 8000dfa:	3001      	adds	r0, #1
 8000dfc:	d0ad      	beq.n	8000d5a <_printf_i+0x15a>
 8000dfe:	6823      	ldr	r3, [r4, #0]
 8000e00:	079b      	lsls	r3, r3, #30
 8000e02:	d413      	bmi.n	8000e2c <_printf_i+0x22c>
 8000e04:	68e0      	ldr	r0, [r4, #12]
 8000e06:	9b03      	ldr	r3, [sp, #12]
 8000e08:	4298      	cmp	r0, r3
 8000e0a:	bfb8      	it	lt
 8000e0c:	4618      	movlt	r0, r3
 8000e0e:	e7a6      	b.n	8000d5e <_printf_i+0x15e>
 8000e10:	2301      	movs	r3, #1
 8000e12:	4632      	mov	r2, r6
 8000e14:	4649      	mov	r1, r9
 8000e16:	4640      	mov	r0, r8
 8000e18:	47d0      	blx	sl
 8000e1a:	3001      	adds	r0, #1
 8000e1c:	d09d      	beq.n	8000d5a <_printf_i+0x15a>
 8000e1e:	3501      	adds	r5, #1
 8000e20:	68e3      	ldr	r3, [r4, #12]
 8000e22:	9903      	ldr	r1, [sp, #12]
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	42ab      	cmp	r3, r5
 8000e28:	dcf2      	bgt.n	8000e10 <_printf_i+0x210>
 8000e2a:	e7eb      	b.n	8000e04 <_printf_i+0x204>
 8000e2c:	2500      	movs	r5, #0
 8000e2e:	f104 0619 	add.w	r6, r4, #25
 8000e32:	e7f5      	b.n	8000e20 <_printf_i+0x220>
 8000e34:	08000f56 	.word	0x08000f56
 8000e38:	08000f67 	.word	0x08000f67

08000e3c <memmove>:
 8000e3c:	4288      	cmp	r0, r1
 8000e3e:	b510      	push	{r4, lr}
 8000e40:	eb01 0402 	add.w	r4, r1, r2
 8000e44:	d902      	bls.n	8000e4c <memmove+0x10>
 8000e46:	4284      	cmp	r4, r0
 8000e48:	4623      	mov	r3, r4
 8000e4a:	d807      	bhi.n	8000e5c <memmove+0x20>
 8000e4c:	1e43      	subs	r3, r0, #1
 8000e4e:	42a1      	cmp	r1, r4
 8000e50:	d008      	beq.n	8000e64 <memmove+0x28>
 8000e52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000e56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000e5a:	e7f8      	b.n	8000e4e <memmove+0x12>
 8000e5c:	4402      	add	r2, r0
 8000e5e:	4601      	mov	r1, r0
 8000e60:	428a      	cmp	r2, r1
 8000e62:	d100      	bne.n	8000e66 <memmove+0x2a>
 8000e64:	bd10      	pop	{r4, pc}
 8000e66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000e6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000e6e:	e7f7      	b.n	8000e60 <memmove+0x24>

08000e70 <_sbrk_r>:
 8000e70:	b538      	push	{r3, r4, r5, lr}
 8000e72:	4d06      	ldr	r5, [pc, #24]	@ (8000e8c <_sbrk_r+0x1c>)
 8000e74:	2300      	movs	r3, #0
 8000e76:	4604      	mov	r4, r0
 8000e78:	4608      	mov	r0, r1
 8000e7a:	602b      	str	r3, [r5, #0]
 8000e7c:	f7ff fa98 	bl	80003b0 <_sbrk>
 8000e80:	1c43      	adds	r3, r0, #1
 8000e82:	d102      	bne.n	8000e8a <_sbrk_r+0x1a>
 8000e84:	682b      	ldr	r3, [r5, #0]
 8000e86:	b103      	cbz	r3, 8000e8a <_sbrk_r+0x1a>
 8000e88:	6023      	str	r3, [r4, #0]
 8000e8a:	bd38      	pop	{r3, r4, r5, pc}
 8000e8c:	200001ac 	.word	0x200001ac

08000e90 <memcpy>:
 8000e90:	440a      	add	r2, r1
 8000e92:	4291      	cmp	r1, r2
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000e98:	d100      	bne.n	8000e9c <memcpy+0xc>
 8000e9a:	4770      	bx	lr
 8000e9c:	b510      	push	{r4, lr}
 8000e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000ea2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000ea6:	4291      	cmp	r1, r2
 8000ea8:	d1f9      	bne.n	8000e9e <memcpy+0xe>
 8000eaa:	bd10      	pop	{r4, pc}

08000eac <_realloc_r>:
 8000eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eb0:	4607      	mov	r7, r0
 8000eb2:	4614      	mov	r4, r2
 8000eb4:	460d      	mov	r5, r1
 8000eb6:	b921      	cbnz	r1, 8000ec2 <_realloc_r+0x16>
 8000eb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	f7ff bc4d 	b.w	800075c <_malloc_r>
 8000ec2:	b92a      	cbnz	r2, 8000ed0 <_realloc_r+0x24>
 8000ec4:	f7ff fbde 	bl	8000684 <_free_r>
 8000ec8:	4625      	mov	r5, r4
 8000eca:	4628      	mov	r0, r5
 8000ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ed0:	f000 f81a 	bl	8000f08 <_malloc_usable_size_r>
 8000ed4:	4284      	cmp	r4, r0
 8000ed6:	4606      	mov	r6, r0
 8000ed8:	d802      	bhi.n	8000ee0 <_realloc_r+0x34>
 8000eda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8000ede:	d8f4      	bhi.n	8000eca <_realloc_r+0x1e>
 8000ee0:	4621      	mov	r1, r4
 8000ee2:	4638      	mov	r0, r7
 8000ee4:	f7ff fc3a 	bl	800075c <_malloc_r>
 8000ee8:	4680      	mov	r8, r0
 8000eea:	b908      	cbnz	r0, 8000ef0 <_realloc_r+0x44>
 8000eec:	4645      	mov	r5, r8
 8000eee:	e7ec      	b.n	8000eca <_realloc_r+0x1e>
 8000ef0:	42b4      	cmp	r4, r6
 8000ef2:	4622      	mov	r2, r4
 8000ef4:	4629      	mov	r1, r5
 8000ef6:	bf28      	it	cs
 8000ef8:	4632      	movcs	r2, r6
 8000efa:	f7ff ffc9 	bl	8000e90 <memcpy>
 8000efe:	4629      	mov	r1, r5
 8000f00:	4638      	mov	r0, r7
 8000f02:	f7ff fbbf 	bl	8000684 <_free_r>
 8000f06:	e7f1      	b.n	8000eec <_realloc_r+0x40>

08000f08 <_malloc_usable_size_r>:
 8000f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f0c:	1f18      	subs	r0, r3, #4
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	bfbc      	itt	lt
 8000f12:	580b      	ldrlt	r3, [r1, r0]
 8000f14:	18c0      	addlt	r0, r0, r3
 8000f16:	4770      	bx	lr

08000f18 <_init>:
 8000f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f1a:	bf00      	nop
 8000f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f1e:	bc08      	pop	{r3}
 8000f20:	469e      	mov	lr, r3
 8000f22:	4770      	bx	lr

08000f24 <_fini>:
 8000f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f26:	bf00      	nop
 8000f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f2a:	bc08      	pop	{r3}
 8000f2c:	469e      	mov	lr, r3
 8000f2e:	4770      	bx	lr
